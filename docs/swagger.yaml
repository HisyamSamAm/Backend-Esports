basePath: /
definitions:
  model.AuthResponse:
    properties:
      email:
        example: user.example@example.com
        type: string
      message:
        example: Login successful
        type: string
      role:
        example: user
        type: string
      token:
        example: v2.local.xxx
        type: string
      user_id:
        example: 64f123abc456def789012345
        type: string
      username:
        example: userbaru123
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        example: user.example@example.com
        type: string
      password:
        example: passwordAman123
        type: string
    required:
    - email
    - password
    type: object
  model.Match:
    properties:
      _id:
        type: string
      created_at:
        type: string
      location:
        type: string
      match_date:
        type: string
      match_time:
        type: string
      result_team_a_score:
        type: integer
      result_team_b_score:
        type: integer
      round:
        type: string
      status:
        type: string
      team_a_id:
        type: string
      team_b_id:
        type: string
      tournament_id:
        type: string
      updated_at:
        type: string
      winner_team_id:
        type: string
    type: object
  model.MatchBasicInfo:
    properties:
      _id:
        type: string
      location:
        type: string
      match_date:
        type: string
      match_time:
        type: string
      result_team_a_score:
        type: integer
      result_team_b_score:
        type: integer
      round:
        type: string
      status:
        type: string
      team_a:
        $ref: '#/definitions/model.TeamBasicInfo'
      team_b:
        $ref: '#/definitions/model.TeamBasicInfo'
      winner_team_id:
        type: string
    type: object
  model.MatchRequest:
    properties:
      location:
        example: Stadium XYZ
        type: string
      match_date:
        type: string
      match_time:
        example: "20:00"
        type: string
      result_team_a_score:
        example: 2
        type: integer
      result_team_b_score:
        example: 3
        type: integer
      round:
        example: Grand Final
        type: string
      status:
        enum:
        - scheduled
        - ongoing
        - completed
        - cancelled
        example: completed
        type: string
      team_a_id:
        example: 687f9d7c8efa8f58af86646a
        type: string
      team_b_id:
        example: 687f9d7c8efa8f58af86646b
        type: string
      tournament_id:
        example: 687e5cd44643a58edf8210e8
        type: string
      winner_team_id:
        example: 687f9d7c8efa8f58af86646b
        type: string
    required:
    - match_date
    - match_time
    - round
    - status
    - team_a_id
    - team_b_id
    - tournament_id
    type: object
  model.MatchResponse:
    properties:
      match_id:
        type: string
      message:
        type: string
    type: object
  model.MatchWithDetails:
    properties:
      _id:
        type: string
      created_at:
        type: string
      location:
        type: string
      match_date:
        type: string
      match_time:
        type: string
      result_team_a_score:
        type: integer
      result_team_b_score:
        type: integer
      round:
        type: string
      status:
        type: string
      team_a:
        $ref: '#/definitions/model.TeamBasicInfo'
      team_a_id:
        type: string
      team_b:
        $ref: '#/definitions/model.TeamBasicInfo'
      team_b_id:
        type: string
      tournament_id:
        type: string
      updated_at:
        type: string
      winner_team_id:
        type: string
    type: object
  model.Player:
    properties:
      _id:
        type: string
      avatar_url:
        type: string
      created_at:
        type: string
      ml_id:
        type: string
      ml_nickname:
        type: string
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  model.PlayerDetails:
    properties:
      _id:
        type: string
      ml_id:
        type: string
      ml_nickname:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  model.PlayerRequest:
    properties:
      avatar_url:
        example: https://example.com/avatar.png
        type: string
      ml_id:
        example: "123456789"
        type: string
      ml_nickname:
        example: johndoe123
        type: string
      name:
        example: John Doe
        type: string
      status:
        example: active
        type: string
    type: object
  model.PlayerResponse:
    properties:
      message:
        type: string
      player_id:
        type: string
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: user.baru@example.com
        type: string
      password:
        example: passwordAman123
        minLength: 6
        type: string
      username:
        example: userbaru123
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.TeamBasicInfo:
    properties:
      _id:
        type: string
      logo_url:
        type: string
      team_name:
        type: string
    type: object
  model.TeamRequest:
    properties:
      captain_id:
        example: 687f9d7c8efa8f58af86646a
        type: string
      logo_url:
        example: https://example.com/rrq_logo.png
        type: string
      members:
        example:
        - 687f9d7c8efa8f58af86646a
        - 687f9d7c8efa8f58af86646b
        items:
          type: string
        type: array
      team_name:
        example: RRQ Hoshi
        type: string
    type: object
  model.TeamResponse:
    properties:
      message:
        type: string
      team_id:
        type: string
    type: object
  model.TeamWithDetails:
    properties:
      _id:
        type: string
      captain_details:
        $ref: '#/definitions/model.PlayerDetails'
      captain_id:
        type: string
      created_at:
        type: string
      logo_url:
        type: string
      members:
        items:
          type: string
        type: array
      members_details:
        items:
          $ref: '#/definitions/model.PlayerDetails'
        type: array
      team_name:
        type: string
      updated_at:
        type: string
    type: object
  model.Tournament:
    properties:
      _id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      end_date:
        type: string
      name:
        type: string
      prize_pool:
        type: string
      rules_document_url:
        type: string
      start_date:
        type: string
      status:
        type: string
      teams_participating:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  model.TournamentPublic:
    properties:
      _id:
        type: string
      description:
        type: string
      end_date:
        type: string
      name:
        type: string
      prize_pool:
        type: string
      rules_document_url:
        type: string
      start_date:
        type: string
      status:
        type: string
    type: object
  model.TournamentRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      name:
        type: string
      prize_pool:
        type: string
      rules_document_url:
        type: string
      start_date:
        type: string
      status:
        enum:
        - upcoming
        - ongoing
        - completed
        type: string
      teams_participating:
        items:
          type: string
        type: array
    required:
    - description
    - end_date
    - name
    - prize_pool
    - start_date
    - status
    type: object
  model.TournamentResponse:
    properties:
      message:
        type: string
      tournament_id:
        type: string
    type: object
  model.TournamentWithDetails:
    properties:
      _id:
        type: string
      description:
        type: string
      end_date:
        type: string
      matches:
        items:
          $ref: '#/definitions/model.MatchBasicInfo'
        type: array
      name:
        type: string
      prize_pool:
        type: string
      rules_document_url:
        type: string
      start_date:
        type: string
      status:
        type: string
      teams_participating:
        items:
          $ref: '#/definitions/model.TeamBasicInfo'
        type: array
    type: object
  model.UpdateUserRequest:
    properties:
      email:
        example: email.update@example.com
        type: string
      role:
        enum:
        - user
        - admin
        example: admin
        type: string
      username:
        example: usernameUpdate
        maxLength: 50
        minLength: 3
        type: string
    type: object
  model.UploadResponse:
    properties:
      file_name:
        type: string
      file_url:
        type: string
      message:
        type: string
    type: object
  model.UserProfile:
    properties:
      _id:
        example: 64f123abc456def789012345
        type: string
      created_at:
        example: "2025-07-16T07:28:37.016Z"
        type: string
      email:
        example: user.example@example.com
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2025-07-16T07:28:37.016Z"
        type: string
      username:
        example: userbaru123
        type: string
    type: object
  model.UserResponse:
    properties:
      message:
        example: User registered successfully
        type: string
      user_id:
        example: 64f123abc456def789012345
        type: string
    type: object
  model.UserTicket:
    properties:
      _id:
        type: string
      match_id:
        type: string
      purchase_date:
        type: string
      status:
        description: e.g., "valid", "used"
        type: string
      user_id:
        type: string
    type: object
  model.UserTicketRequest:
    properties:
      match_id:
        type: string
    required:
    - match_id
    type: object
  model.UserTicketResponse:
    properties:
      _id:
        type: string
      match_details:
        $ref: '#/definitions/model.MatchBasicInfo'
      match_id:
        type: string
      purchase_date:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  model.UsersListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.UserProfile'
        type: array
      message:
        example: Users retrieved successfully
        type: string
      total:
        example: 5
        type: integer
    type: object
host: localhost:1010
info:
  contact:
    email: support@embeck.com
    name: API Support
  description: This is the API for the ESports Management platform.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: ESports Management API
  version: "1.0"
paths:
  /api/admin/matches:
    get:
      consumes:
      - application/json
      description: Mendapatkan daftar semua pertandingan, bisa difilter berdasarkan
        tournament_id
      parameters:
      - description: Filter pertandingan berdasarkan ID turnamen
        in: query
        name: tournament_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MatchWithDetails'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Matches
      tags:
      - Matches
    post:
      consumes:
      - application/json
      description: Membuat pertandingan baru untuk turnamen
      parameters:
      - description: Match data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MatchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.MatchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create New Match
      tags:
      - Matches
  /api/admin/matches/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus pertandingan dari database
      parameters:
      - description: Match ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MatchResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Match
      tags:
      - Matches
    get:
      consumes:
      - application/json
      description: Mendapatkan detail pertandingan berdasarkan ID
      parameters:
      - description: Match ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Match'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Match By ID
      tags:
      - Matches
    put:
      consumes:
      - application/json
      description: Memperbarui detail pertandingan termasuk input skor
      parameters:
      - description: Match ID
        in: path
        name: id
        required: true
        type: string
      - description: Match data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.MatchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MatchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Match
      tags:
      - Matches
  /api/admin/players:
    get:
      consumes:
      - application/json
      description: Mendapatkan daftar semua pemain Mobile Legends
      produces:
      - application/json
      responses:
        "200":
          description: Daftar semua pemain
          schema:
            items:
              $ref: '#/definitions/model.Player'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get All Players
      tags:
      - Players
    post:
      consumes:
      - application/json
      description: Menambahkan pemain baru ke database
      parameters:
      - description: Player data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.PlayerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Player berhasil dibuat
          schema:
            $ref: '#/definitions/model.PlayerResponse'
        "400":
          description: Request data tidak valid
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Player sudah ada
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create New Player
      tags:
      - Players
  /api/admin/players/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus pemain dari database
      parameters:
      - description: Player ID
        example: '"64f123abc456def789012345"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Player berhasil dihapus
          schema:
            additionalProperties: true
            type: object
        "400":
          description: ID tidak valid
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Player tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete Player
      tags:
      - Players
    get:
      consumes:
      - application/json
      description: Mendapatkan detail pemain berdasarkan ID
      parameters:
      - description: Player ID
        example: '"64f123abc456def789012345"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Detail pemain
          schema:
            $ref: '#/definitions/model.Player'
        "400":
          description: ID tidak valid
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Player tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Player By ID
      tags:
      - Players
    put:
      consumes:
      - application/json
      description: Memperbarui detail pemain
      parameters:
      - description: Player ID
        example: '"64f123abc456def789012345"'
        in: path
        name: id
        required: true
        type: string
      - description: Player data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.PlayerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Player berhasil diupdate
          schema:
            $ref: '#/definitions/model.PlayerResponse'
        "400":
          description: Request data tidak valid
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Player tidak ditemukan
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Player
      tags:
      - Players
  /api/admin/teams:
    get:
      consumes:
      - application/json
      description: Mendapatkan daftar semua tim dengan detail kapten
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TeamWithDetails'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get All Teams
      tags:
      - Teams
    post:
      consumes:
      - application/json
      description: Membuat tim baru dengan kapten dan anggota
      parameters:
      - description: Team data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TeamRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.TeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create New Team
      tags:
      - Teams
  /api/admin/teams/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus tim dari database
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TeamResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete Team
      tags:
      - Teams
    get:
      consumes:
      - application/json
      description: Mendapatkan detail tim berdasarkan ID dengan detail kapten
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TeamWithDetails'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get Team By ID
      tags:
      - Teams
    put:
      consumes:
      - application/json
      description: Memperbarui detail tim
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      - description: Team data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.TeamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Team
      tags:
      - Teams
  /api/admin/tournaments:
    get:
      description: Get all tournaments with admin details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TournamentWithDetails'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tournaments
      tags:
      - Tournament Management (Admin)
    post:
      consumes:
      - application/json
      description: Create a new tournament (admin access required)
      parameters:
      - description: Tournament data
        in: body
        name: tournament
        required: true
        schema:
          $ref: '#/definitions/model.TournamentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.TournamentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new tournament
      tags:
      - Tournament Management (Admin)
  /api/admin/tournaments/{id}:
    delete:
      description: Delete tournament by ID
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TournamentResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete tournament
      tags:
      - Tournament Management (Admin)
    get:
      description: Get tournament details by ID (admin access)
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Tournament'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tournament by ID
      tags:
      - Tournament Management (Admin)
    put:
      consumes:
      - application/json
      description: Update tournament details including participating teams
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: string
      - description: Tournament data
        in: body
        name: tournament
        required: true
        schema:
          $ref: '#/definitions/model.TournamentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TournamentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update tournament
      tags:
      - Tournament Management (Admin)
  /api/admin/upload/player-avatar:
    post:
      consumes:
      - multipart/form-data
      description: Upload player avatar image (PNG, JPG, JPEG)
      parameters:
      - description: Player avatar image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload player avatar
      tags:
      - Upload
  /api/admin/upload/team-logo:
    post:
      consumes:
      - multipart/form-data
      description: Upload team logo image (PNG, JPG, JPEG)
      parameters:
      - description: Team logo image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload team logo
      tags:
      - Upload
  /api/admin/users:
    get:
      consumes:
      - application/json
      description: Mendapatkan daftar semua user (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Daftar semua user berhasil diambil
          schema:
            $ref: '#/definitions/model.UsersListResponse'
        "401":
          description: Unauthorized - Token tidak valid
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Hanya admin yang dapat mengakses
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - Users Management
  /api/admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Menghapus user dari sistem (Admin only)
      parameters:
      - description: User ID
        example: '"64f123abc456def789012345"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil dihapus
          schema:
            additionalProperties: true
            type: object
        "400":
          description: ID tidak valid
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - Token tidak valid
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Hanya admin yang dapat mengakses
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - Users Management
    get:
      consumes:
      - application/json
      description: Mendapatkan detail user berdasarkan ID (Admin only)
      parameters:
      - description: User ID
        example: '"64f123abc456def789012345"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User detail berhasil diambil
          schema:
            $ref: '#/definitions/model.UserProfile'
        "400":
          description: ID tidak valid
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - Token tidak valid
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Hanya admin yang dapat mengakses
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - Users Management
    put:
      consumes:
      - application/json
      description: Mengupdate data user (Admin only)
      parameters:
      - description: User ID
        example: '"64f123abc456def789012345"'
        in: path
        name: id
        required: true
        type: string
      - description: Data user yang akan diupdate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User berhasil diupdate
          schema:
            $ref: '#/definitions/model.UserProfile'
        "400":
          description: Request data tidak valid
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - Token tidak valid
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Hanya admin yang dapat mengakses
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Username atau email sudah digunakan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Users Management
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login user dan mendapatkan PASETO token untuk autentikasi
      parameters:
      - description: Data login user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login berhasil dengan token
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Request data tidak valid
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Kredensial tidak valid
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User Login
      tags:
      - Authentication
  /api/auth/profile:
    get:
      consumes:
      - application/json
      description: Mendapatkan profil user yang sedang login
      produces:
      - application/json
      responses:
        "200":
          description: Profil user
          schema:
            $ref: '#/definitions/model.UserProfile'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Authentication
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Mendaftarkan user baru ke dalam sistem
      parameters:
      - description: Data registrasi user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User berhasil didaftarkan
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Request data tidak valid
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Email atau username sudah digunakan
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register New User
      tags:
      - Authentication
  /api/me/tickets:
    get:
      consumes:
      - application/json
      description: Retrieves all tickets purchased by the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserTicketResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get My Tickets
      tags:
      - Tickets
  /api/tickets/purchase:
    post:
      consumes:
      - application/json
      description: Allows an authenticated user to purchase a ticket for a specific
        match.
      parameters:
      - description: Purchase Ticket Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UserTicketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UserTicket'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Match not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Ticket already purchased
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Purchase a ticket
      tags:
      - Tickets
  /api/tournaments:
    get:
      description: Get all tournaments without admin details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.TournamentPublic'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get all tournaments (public)
      tags:
      - Tournament Data (Public)
  /api/tournaments/{id}:
    get:
      description: Get tournament with populated teams and matches
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TournamentWithDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get tournament details (public)
      tags:
      - Tournament Data (Public)
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and a PASETO token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
